<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>LoRa: lora.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">LoRa
   &#160;<span id="projectnumber">1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('lora_8c_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">lora.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="lora_8h.htm">lora.h</a>&quot;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#define DO fletch1 += *data++; fletch2 += fletch1; l--;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;uint32_t fletcher32(<span class="keyword">const</span> <span class="keywordtype">void</span> *buf1, <span class="keywordtype">size_t</span> len, uint32_t fletcher) {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    (void)fletcher;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *data= buf1;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    uint32_t fletch1 = 0xFFFF;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    uint32_t fletch2 = 0xFFFF;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">while</span> (data &amp;&amp; len) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordtype">size_t</span> l = (len &lt;= 360) ? len : 360;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        len -= l;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">while</span> (l) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            DO;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        fletch1 = (fletch1 &amp; 0xFFFF) + (fletch1 &gt;&gt; 16);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        fletch2 = (fletch2 &amp; 0xFFFF) + (fletch2 &gt;&gt; 16);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> (fletch2 &lt;&lt; 16) | (fletch1 &amp; 0xFFFF);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;uint32_t fletcher32_4(<span class="keyword">const</span> <span class="keywordtype">void</span> *buf1, <span class="keywordtype">size_t</span> len, uint32_t fletcher) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    (void)fletcher;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *data = buf1;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    uint32_t fletch1 = 0xFFFF;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    uint32_t fletch2 = 0xFFFF;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">while</span> (data &amp;&amp; len) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">size_t</span> l = (len &lt;= 360) ? len : 360;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        len -= l;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">while</span> (l) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            DO;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            DO;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            DO;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            DO;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        fletch1 = (fletch1 &amp; 0xFFFF) + (fletch1 &gt;&gt; 16);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        fletch2 = (fletch2 &amp; 0xFFFF) + (fletch2 &gt;&gt; 16);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> (fletch2 &lt;&lt; 16) | (fletch1 &amp; 0xFFFF);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keywordtype">void</span> errorv(<span class="keyword">const</span> <span class="keywordtype">char</span> *message, ...) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    va_list args;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    va_start(args, message);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    vfprintf(stderr, message, args);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    va_end(args);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="lora_8h.htm#a14915245369a82c7a9239f2096c5b8e5">   95</a></span>&#160;packet_t* <a class="code" href="lora_8h.htm#a14915245369a82c7a9239f2096c5b8e5">packet_make</a>(<span class="keyword">const</span> <a class="code" href="lora_8h.htm#a9ebd1e228aedd29e18d3dffa6f49e75a">addr_t</a> src, <span class="keyword">const</span> <a class="code" href="lora_8h.htm#a9ebd1e228aedd29e18d3dffa6f49e75a">addr_t</a> dst,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> <a class="code" href="lora_8h.htm#ae9f2c0d2a6bd0be19a12dba62f2277b2">packet_type_t</a> type, <span class="keyword">const</span> uint16_t ttl) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    packet_t *packet = (packet_t*) calloc(1, <span class="keyword">sizeof</span>(packet_t));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    packet-&gt;src = src;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    packet-&gt;dst = dst;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    packet-&gt;ttl = ttl;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    packet-&gt;type = type;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    packet-&gt;magic = _LORA_MAGIC_;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">//  packet-&gt;checksum[0] = 0;</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">//  packet-&gt;checksum[1] = 0;</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">//  packet-&gt;length = length;</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">//  memcpy(packet-&gt;data, data, length);</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    packet-&gt;checksum = 0L;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> packet;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#define _LORA_PKG_FMT_ &quot;%08X&quot;</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keywordtype">void</span> packet_dump(packet_t *pkg, <span class="keywordtype">size_t</span> width) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    printf(</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="stringliteral">&quot;PKG: &quot;</span> _LORA_PKG_FMT_ <span class="stringliteral">&quot; -&gt; &quot;</span> _LORA_PKG_FMT_ <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="stringliteral">&quot;\tTimeToLive: %u\n&quot;</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="stringliteral">&quot;\tChecksum:   %08x\n&quot;</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="stringliteral">&quot;\tType:       %02x\n&quot;</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="stringliteral">&quot;\tDataLen:    %u\n&quot;</span>,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        pkg-&gt;src,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        pkg-&gt;dst,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        pkg-&gt;ttl,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        pkg-&gt;checksum,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        pkg-&gt;type,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        pkg-&gt;length</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    );</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span>(width) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;pkg-&gt;length; i++) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">if</span>(!(i%width)) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=width; j&gt;0; j--) {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    <span class="comment">// TODO:check package hexdump if dumps correct or not</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    printf(<span class="stringliteral">&quot;%c&quot;</span>, *(<span class="keywordtype">char</span>*)(pkg-&gt;data - width + j));</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                printf(<span class="stringliteral">&quot;\n %x |&quot;</span>, i);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            printf(<span class="stringliteral">&quot; %02x&quot;</span>, *(<span class="keywordtype">char</span>*)(pkg-&gt;data + i));</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        printf(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    printf(<span class="stringliteral">&quot; --- \n&quot;</span>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="lora_8h.htm#a4b50acafcfc2f33c0ab0ddae127eb567">  164</a></span>&#160;uint32_t <a class="code" href="lora_8h.htm#a4b50acafcfc2f33c0ab0ddae127eb567">packet_getsum</a>(packet_t *pkg) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    pkg-&gt;checksum = 0L;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">return</span> fletcher32((uint16_t <span class="keyword">const</span>*) pkg, <span class="keyword">sizeof</span>(packet_t), 0);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;uint32_t packet_prepare(packet_t *pkg, <span class="keyword">const</span> uint8_t length, <span class="keyword">const</span> <span class="keywordtype">void</span> *data) {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">if</span>(!pkg) {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span>(data) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        memset(pkg-&gt;data, 0, <span class="keyword">sizeof</span>(pkg-&gt;data));</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        pkg-&gt;length = <span class="keyword">sizeof</span>(pkg-&gt;data) &lt; length ? <span class="keyword">sizeof</span>(pkg-&gt;data) : length;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        memcpy(pkg-&gt;data, data, pkg-&gt;length);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">// update data checksum</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        pkg-&gt;data_crc = fletcher32(</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            (uint16_t <span class="keyword">const</span>*) pkg-&gt;data, <span class="keyword">sizeof</span>(pkg-&gt;data), 0</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        );</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// update packet checksum</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    pkg-&gt;checksum = <a class="code" href="lora_8h.htm#a4b50acafcfc2f33c0ab0ddae127eb567">packet_getsum</a>(pkg);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span> pkg-&gt;checksum;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="lora_8h.htm#a1fe9b1b67904ad7e2019cb3aa3214508">  195</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="lora_8h.htm#a1fe9b1b67904ad7e2019cb3aa3214508">packet_verify</a>(packet_t *pkg) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    uint32_t old_sum = pkg-&gt;checksum;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    uint32_t new_sum = <a class="code" href="lora_8h.htm#a4b50acafcfc2f33c0ab0ddae127eb567">packet_getsum</a>(pkg);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    pkg-&gt;checksum = old_sum;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">return</span> (old_sum == new_sum);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="lora_8h.htm#a93a53ad6e9c2925ccfd9bcabf895ba1e">  217</a></span>&#160;<a class="code" href="struct_node.htm">node_t</a>* <a class="code" href="lora_8h.htm#a93a53ad6e9c2925ccfd9bcabf895ba1e">node_make</a>(<span class="keyword">const</span> uint64_t <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">bool</span> internet) {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="struct_node.htm">node_t</a> *node = (<a class="code" href="struct_node.htm">node_t</a>*) malloc(<span class="keyword">sizeof</span>(<a class="code" href="struct_node.htm">node_t</a>));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    memset(node, 0, <span class="keyword">sizeof</span>(<a class="code" href="struct_node.htm">node_t</a>));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    node-&gt;internet = internet;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    node-&gt;links = NULL;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    node-&gt;count = 0;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    node-&gt;id = id;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">//*(unsigned short*)(&amp;node-&gt;mem_size) = 1 &lt;&lt; 7;</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">//node-&gt;last_pkgs = list_make(NULL);</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    node-&gt;device = NULL;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">return</span> node;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keywordtype">void</span> node_dump(<a class="code" href="struct_node.htm">node_t</a> *node, <span class="keywordtype">bool</span> links) {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    printf(</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="stringliteral">&quot;NODE: %llu, hasConnection: %s, thread:%p \n&quot;</span>,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        node-&gt;id,</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        node-&gt;internet ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        pthread_self()</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    );</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">if</span>(links) {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;node-&gt;count; i++) {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <a class="code" href="struct_link.htm">link_t</a> *<span class="keyword">self</span> = node-&gt;links[i];</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            printf(<span class="stringliteral">&quot;\tLink: %p\n&quot;</span>, <span class="keyword">self</span>);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        printf(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    printf(<span class="stringliteral">&quot; --- \n&quot;</span>);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keywordtype">void</span> node_recv(<a class="code" href="struct_node.htm">node_t</a> *node, packet_t *pkg) {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    printf(<span class="stringliteral">&quot;NODE RECV node.id:%p pkg:%p thread:%p \n&quot;</span>,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        node-&gt;id, pkg, pthread_self());</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">if</span>(node-&gt;device &amp;&amp; node-&gt;device-&gt;queue.recv) {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="list_8h.htm#addeb181aaf428c5d8309e94c1fe4f0c7">list_push</a>(&amp;node-&gt;device-&gt;queue.recv, <a class="code" href="list_8h.htm#a3be976c2198f8b1047b8e1599634f523">list_make</a>(pkg));</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="lora_8h.htm#a7e6dc200e1aeb204ea8bf141ff7d98c2">print</a>(pkg, <span class="keyword">sizeof</span>(packet_t));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keywordtype">void</span> node_relay(<a class="code" href="struct_node.htm">node_t</a> *node, packet_t *pkg) {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    printf(<span class="stringliteral">&quot;NODE RELAY node.id:%p pkg:%p thread:%p \n&quot;</span>,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        (<span class="keywordtype">void</span>*) node-&gt;id, pkg, pthread_self());</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">if</span>(pkg-&gt;ttl &lt; 1) {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        printf(<span class="stringliteral">&quot;TTL = %hu \n&quot;</span>, pkg-&gt;ttl);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    packet_t *copy = pkg;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="comment">//(packet_t*) malloc(sizeof(packet_t));</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">//memcpy(copy, pkg, sizeof(packet_t));</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    copy-&gt;ttl -= 1;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;node-&gt;count; i++) {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <a class="code" href="struct_link.htm">link_t</a> *<span class="keyword">self</span> = node-&gt;links[i];</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <a class="code" href="lora_8h.htm#ab9bb62a5a3ea6f89d117122dd32b058d">link_deliver</a>(<span class="keyword">self</span>, copy);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="lora_8h.htm#a39a257065dfbdebf8434ed81baf363a6">  306</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#a39a257065dfbdebf8434ed81baf363a6">node_deliver</a>(<a class="code" href="struct_node.htm">node_t</a> *node, packet_t *pkg) {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    printf(<span class="stringliteral">&quot;NODE DELIVER: node.id:%p pkg:%p thread:%p \n\t&quot;</span>,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        node-&gt;id, pkg, pthread_self());</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">if</span>(pkg-&gt;src == node-&gt;id) {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        printf(<span class="stringliteral">&quot;returned to start\n&quot;</span>);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">if</span>(!pkg-&gt;checksum) {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        printf(<span class="stringliteral">&quot;zero checksum package not allowed\n&quot;</span>);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// if(list_has(node-&gt;last_pkgs, (void*)pkg-&gt;checksum) != NULL) {</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">//  printf(&quot;already have pkg.chksum:%p\n&quot;, (void*)pkg-&gt;checksum);</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="comment">//  return;</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="comment">// }</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// list_push(&amp;node-&gt;last_pkgs, list_make((void*)pkg-&gt;checksum));</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// if(list_size(node-&gt;last_pkgs) &gt; node-&gt;mem_size) {</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">//  list_t *keep = list_find(node-&gt;last_pkgs, list_last(node-&gt;last_pkgs));</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">//  list_clean(&amp;keep, false);</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">// }</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">if</span>(pkg-&gt;dst == node-&gt;id) {</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        node_recv(node, pkg);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        node_relay(node, pkg);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno"><a class="line" href="lora_8h.htm#a243f0af1c62ebb32f4047df438e9d79b">  343</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#a243f0af1c62ebb32f4047df438e9d79b">node_connect_ptr</a>(<a class="code" href="struct_node.htm">node_t</a> *node, <span class="keywordtype">unsigned</span> count, <a class="code" href="struct_link.htm">link_t</a> **links) {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordtype">unsigned</span> offset = node-&gt;count;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    node-&gt;links = (<a class="code" href="struct_link.htm">link_t</a>**) realloc(</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        node-&gt;links,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        (offset + count) * <span class="keyword">sizeof</span>(<a class="code" href="struct_link.htm">link_t</a>*)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    );</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;count; i++) {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        node-&gt;links[offset + i] = links[i];</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    node-&gt;count += count;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="lora_8h.htm#aa9a8ef3651fe28848dc7e1cb664fb9c6">  366</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#aa9a8ef3651fe28848dc7e1cb664fb9c6">node_connect_va</a>(<a class="code" href="struct_node.htm">node_t</a> *node, <span class="keywordtype">unsigned</span> count, va_list args) {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <a class="code" href="struct_link.htm">link_t</a> **temp = (<a class="code" href="struct_link.htm">link_t</a>**) malloc(count * <span class="keyword">sizeof</span>(<a class="code" href="struct_link.htm">link_t</a>*));</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;count; i++) {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        temp[i] = va_arg(args, <a class="code" href="struct_link.htm">link_t</a>*);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="lora_8h.htm#a243f0af1c62ebb32f4047df438e9d79b">node_connect_ptr</a>(node, count, temp);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    free(temp);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;}</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="lora_8h.htm#a4ee19a53b6dbc425fd3fb038502c4503">  386</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#a4ee19a53b6dbc425fd3fb038502c4503">node_connect</a>(<a class="code" href="struct_node.htm">node_t</a> *node, <span class="keywordtype">unsigned</span> count, ...) {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    va_list args;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    va_start(args, count);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="lora_8h.htm#aa9a8ef3651fe28848dc7e1cb664fb9c6">node_connect_va</a>(node, count, args);</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    va_end(args);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;}</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="lora_8h.htm#a090f66a52462c020295a54569d00ca7a">  409</a></span>&#160;<a class="code" href="struct_link.htm">link_t</a>* <a class="code" href="lora_8h.htm#a090f66a52462c020295a54569d00ca7a">link_make</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> latency, <span class="keywordtype">unsigned</span> deviation) {</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="struct_link.htm">link_t</a> *link = (<a class="code" href="struct_link.htm">link_t</a>*) malloc(<span class="keyword">sizeof</span>(<a class="code" href="struct_link.htm">link_t</a>));</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    memset(link, 0, <span class="keyword">sizeof</span>(<a class="code" href="struct_link.htm">link_t</a>));</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    link-&gt;deviation = deviation;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    link-&gt;latency = latency;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    link-&gt;nodes = NULL;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    link-&gt;count = 0;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">return</span> link;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;}</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="keywordtype">void</span> link_dump(<a class="code" href="struct_link.htm">link_t</a> *link, <span class="keywordtype">bool</span> nodes) {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    printf(</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="stringliteral">&quot;LINK: Latency/Deviation: %lu / %u, thread:%p \n&quot;</span>,</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        link-&gt;latency,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        link-&gt;deviation,</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        pthread_self()</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    );</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordflow">if</span>(nodes) {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;link-&gt;count; i++) {</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <a class="code" href="struct_node.htm">node_t</a> *<span class="keyword">self</span> = link-&gt;nodes[i];</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            printf(<span class="stringliteral">&quot;\tNode: %p\n&quot;</span>, <span class="keyword">self</span>);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        printf(<span class="stringliteral">&quot;\n&quot;</span>);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    printf(<span class="stringliteral">&quot; --- \n&quot;</span>);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="preprocessor">#define _LORA_MS_MULTIP 1000</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#ab9bb62a5a3ea6f89d117122dd32b058d">link_deliver</a>(<a class="code" href="struct_link.htm">link_t</a> *link, packet_t *pkg) {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    printf(<span class="stringliteral">&quot;LINK DELIVER: link:%p pkg:%p thread:%p \n&quot;</span>,</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        link, pkg, pthread_self());</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    srand(time(NULL));</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    usleep(link-&gt;latency * _LORA_MS_MULTIP);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;link-&gt;count; i++) {</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <a class="code" href="struct_node.htm">node_t</a> *<span class="keyword">self</span> = link-&gt;nodes[i];</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        usleep(_LORA_MS_MULTIP * (rand() % link-&gt;deviation));</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <a class="code" href="lora_8h.htm#a39a257065dfbdebf8434ed81baf363a6">node_deliver</a>(<span class="keyword">self</span>, pkg);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    }</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;}</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno"><a class="line" href="lora_8h.htm#a989284e478259382e177b5ed317c2e78">  473</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#a989284e478259382e177b5ed317c2e78">link_assign_ptr</a>(<a class="code" href="struct_link.htm">link_t</a> *link, <span class="keywordtype">unsigned</span> count, <a class="code" href="struct_node.htm">node_t</a> **nodes) {</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordtype">unsigned</span> offset = link-&gt;count;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    link-&gt;nodes = (<a class="code" href="struct_node.htm">node_t</a>**) realloc(</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        link-&gt;nodes,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        (offset + count) * <span class="keyword">sizeof</span>(<a class="code" href="struct_node.htm">node_t</a>*)</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    );</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;count; i++) {</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        link-&gt;nodes[offset + i] = nodes[i];</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    }</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    link-&gt;count += count;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="lora_8h.htm#a50d08e611d8db36e0cb995af18d1ae0b">  494</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#a50d08e611d8db36e0cb995af18d1ae0b">link_assign_va</a>(<a class="code" href="struct_link.htm">link_t</a> *link, <span class="keywordtype">unsigned</span> count, va_list args) {</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <a class="code" href="struct_node.htm">node_t</a> **temp = (<a class="code" href="struct_node.htm">node_t</a>**) malloc(count * <span class="keyword">sizeof</span>(<a class="code" href="struct_node.htm">node_t</a>*));</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;count; i++) {</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        temp[i] = va_arg(args, <a class="code" href="struct_node.htm">node_t</a>*);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    }</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <a class="code" href="lora_8h.htm#a989284e478259382e177b5ed317c2e78">link_assign_ptr</a>(link, count, temp);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    free(temp);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;}</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno"><a class="line" href="lora_8h.htm#a58d51aa671906dd8a4d90e5774b96624">  513</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#a58d51aa671906dd8a4d90e5774b96624">link_assign</a>(<a class="code" href="struct_link.htm">link_t</a> *link, <span class="keywordtype">unsigned</span> count, ...) {</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    va_list args;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    va_start(args, count);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <a class="code" href="lora_8h.htm#a50d08e611d8db36e0cb995af18d1ae0b">link_assign_va</a>(link, count, args);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    va_end(args);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;}</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno"><a class="line" href="lora_8h.htm#a7e6dc200e1aeb204ea8bf141ff7d98c2">  530</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="lora_8h.htm#a7e6dc200e1aeb204ea8bf141ff7d98c2">print</a>(<span class="keywordtype">void</span> *obj, <span class="keywordtype">size_t</span> size) {</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">switch</span>(size) {</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keywordflow">case</span> <span class="keyword">sizeof</span>(packet_t):</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            packet_dump(obj, 16);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="keywordflow">case</span> <span class="keyword">sizeof</span>(<a class="code" href="struct_node.htm">node_t</a>):</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            node_dump(obj, <span class="keyword">true</span>);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="keywordflow">case</span> <span class="keyword">sizeof</span>(<a class="code" href="struct_link.htm">link_t</a>):</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            link_dump(obj, <span class="keyword">true</span>);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            errorv(<span class="stringliteral">&quot;&gt; unknown type&quot;</span>);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    }</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="comment">//printf(&quot;\r&quot;);</span></div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    fflush(stdout);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;}</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="ttc" id="lora_8h_htm_a989284e478259382e177b5ed317c2e78"><div class="ttname"><a href="lora_8h.htm#a989284e478259382e177b5ed317c2e78">link_assign_ptr</a></div><div class="ttdeci">void link_assign_ptr(link_t *, unsigned, node_t **)</div><div class="ttdoc">assign nodes to a link via ptr to node-ptr </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00473">lora.c:473</a></div></div>
<div class="ttc" id="lora_8h_htm_ae9f2c0d2a6bd0be19a12dba62f2277b2"><div class="ttname"><a href="lora_8h.htm#ae9f2c0d2a6bd0be19a12dba62f2277b2">packet_type_t</a></div><div class="ttdeci">enum PacketType packet_type_t</div></div>
<div class="ttc" id="lora_8h_htm_a9ebd1e228aedd29e18d3dffa6f49e75a"><div class="ttname"><a href="lora_8h.htm#a9ebd1e228aedd29e18d3dffa6f49e75a">addr_t</a></div><div class="ttdeci">uint32_t addr_t</div><div class="ttdef"><b>Definition:</b> <a href="lora_8h_source.htm#l00062">lora.h:62</a></div></div>
<div class="ttc" id="lora_8h_htm_a39a257065dfbdebf8434ed81baf363a6"><div class="ttname"><a href="lora_8h.htm#a39a257065dfbdebf8434ed81baf363a6">node_deliver</a></div><div class="ttdeci">void node_deliver(node_t *, packet_t *)</div><div class="ttdoc">called when node receives packet from link </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00306">lora.c:306</a></div></div>
<div class="ttc" id="lora_8h_htm_ab9bb62a5a3ea6f89d117122dd32b058d"><div class="ttname"><a href="lora_8h.htm#ab9bb62a5a3ea6f89d117122dd32b058d">link_deliver</a></div><div class="ttdeci">void link_deliver(link_t *, packet_t *)</div><div class="ttdoc">causes link to publish packet to connected nodes called when link got a packet </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00452">lora.c:452</a></div></div>
<div class="ttc" id="lora_8h_htm_a14915245369a82c7a9239f2096c5b8e5"><div class="ttname"><a href="lora_8h.htm#a14915245369a82c7a9239f2096c5b8e5">packet_make</a></div><div class="ttdeci">packet_t * packet_make(const addr_t, const addr_t, const packet_type_t, const uint16_t)</div><div class="ttdoc">create a new packet. </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00095">lora.c:95</a></div></div>
<div class="ttc" id="lora_8h_htm_a50d08e611d8db36e0cb995af18d1ae0b"><div class="ttname"><a href="lora_8h.htm#a50d08e611d8db36e0cb995af18d1ae0b">link_assign_va</a></div><div class="ttdeci">void link_assign_va(link_t *, unsigned, va_list)</div><div class="ttdoc">assign nodes to a link via variable argument list of nodes </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00494">lora.c:494</a></div></div>
<div class="ttc" id="lora_8h_htm_a93a53ad6e9c2925ccfd9bcabf895ba1e"><div class="ttname"><a href="lora_8h.htm#a93a53ad6e9c2925ccfd9bcabf895ba1e">node_make</a></div><div class="ttdeci">node_t * node_make(const uint64_t, const bool)</div><div class="ttdoc">creates a &amp;#39;node&amp;#39; which is a virtual device state </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00217">lora.c:217</a></div></div>
<div class="ttc" id="list_8h_htm_addeb181aaf428c5d8309e94c1fe4f0c7"><div class="ttname"><a href="list_8h.htm#addeb181aaf428c5d8309e94c1fe4f0c7">list_push</a></div><div class="ttdeci">void list_push(list_t **, list_t *)</div><div class="ttdoc">inserts given item to top of list </div><div class="ttdef"><b>Definition:</b> <a href="list_8c_source.htm#l00188">list.c:188</a></div></div>
<div class="ttc" id="lora_8h_htm_a4ee19a53b6dbc425fd3fb038502c4503"><div class="ttname"><a href="lora_8h.htm#a4ee19a53b6dbc425fd3fb038502c4503">node_connect</a></div><div class="ttdeci">void node_connect(node_t *, unsigned,...)</div><div class="ttdoc">connect nodes via count number of links. you should have count number of links after count arg exampl...</div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00386">lora.c:386</a></div></div>
<div class="ttc" id="struct_link_htm"><div class="ttname"><a href="struct_link.htm">Link</a></div><div class="ttdef"><b>Definition:</b> <a href="lora_8h_source.htm#l00124">lora.h:124</a></div></div>
<div class="ttc" id="lora_8h_htm_aa9a8ef3651fe28848dc7e1cb664fb9c6"><div class="ttname"><a href="lora_8h.htm#aa9a8ef3651fe28848dc7e1cb664fb9c6">node_connect_va</a></div><div class="ttdeci">void node_connect_va(node_t *, unsigned, va_list)</div><div class="ttdoc">connect nodes via count number of links links must be passed as a va_list typed variable argument lis...</div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00366">lora.c:366</a></div></div>
<div class="ttc" id="lora_8h_htm_a4b50acafcfc2f33c0ab0ddae127eb567"><div class="ttname"><a href="lora_8h.htm#a4b50acafcfc2f33c0ab0ddae127eb567">packet_getsum</a></div><div class="ttdeci">uint32_t packet_getsum(packet_t *)</div><div class="ttdoc">prepare packet for sending. this includes setting data it also calculates checksum ...</div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00164">lora.c:164</a></div></div>
<div class="ttc" id="list_8h_htm_a3be976c2198f8b1047b8e1599634f523"><div class="ttname"><a href="list_8h.htm#a3be976c2198f8b1047b8e1599634f523">list_make</a></div><div class="ttdeci">list_t * list_make(void *)</div><div class="ttdoc">creates new list item with given data </div><div class="ttdef"><b>Definition:</b> <a href="list_8c_source.htm#l00019">list.c:19</a></div></div>
<div class="ttc" id="lora_8h_htm_a1fe9b1b67904ad7e2019cb3aa3214508"><div class="ttname"><a href="lora_8h.htm#a1fe9b1b67904ad7e2019cb3aa3214508">packet_verify</a></div><div class="ttdeci">bool packet_verify(packet_t *)</div><div class="ttdoc">check packet for validity </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00195">lora.c:195</a></div></div>
<div class="ttc" id="lora_8h_htm_a243f0af1c62ebb32f4047df438e9d79b"><div class="ttname"><a href="lora_8h.htm#a243f0af1c62ebb32f4047df438e9d79b">node_connect_ptr</a></div><div class="ttdeci">void node_connect_ptr(node_t *, unsigned, link_t **)</div><div class="ttdoc">connect nodes via count number of links </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00343">lora.c:343</a></div></div>
<div class="ttc" id="lora_8h_htm_a7e6dc200e1aeb204ea8bf141ff7d98c2"><div class="ttname"><a href="lora_8h.htm#a7e6dc200e1aeb204ea8bf141ff7d98c2">print</a></div><div class="ttdeci">void print(void *, size_t)</div><div class="ttdoc">prints given object according to its size uses switch statement to find out object type ...</div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00530">lora.c:530</a></div></div>
<div class="ttc" id="lora_8h_htm_a090f66a52462c020295a54569d00ca7a"><div class="ttname"><a href="lora_8h.htm#a090f66a52462c020295a54569d00ca7a">link_make</a></div><div class="ttdeci">link_t * link_make(unsigned long, unsigned)</div><div class="ttdoc">allocate and initialize link object with given latency and deviation </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00409">lora.c:409</a></div></div>
<div class="ttc" id="lora_8h_htm"><div class="ttname"><a href="lora_8h.htm">lora.h</a></div></div>
<div class="ttc" id="struct_node_htm"><div class="ttname"><a href="struct_node.htm">Node</a></div><div class="ttdef"><b>Definition:</b> <a href="lora_8h_source.htm#l00105">lora.h:105</a></div></div>
<div class="ttc" id="lora_8h_htm_a58d51aa671906dd8a4d90e5774b96624"><div class="ttname"><a href="lora_8h.htm#a58d51aa671906dd8a4d90e5774b96624">link_assign</a></div><div class="ttdeci">void link_assign(link_t *, unsigned,...)</div><div class="ttdoc">assign count number of nodes to a link via variable sized arguments </div><div class="ttdef"><b>Definition:</b> <a href="lora_8c_source.htm#l00513">lora.c:513</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>lora.c</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
