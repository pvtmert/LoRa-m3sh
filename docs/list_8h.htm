<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>LoRa: list.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">LoRa
   &#160;<span id="projectnumber">1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('list_8h.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">list.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;stdlib.h&gt;</code><br />
<code>#include &lt;stdbool.h&gt;</code><br />
</div>
<p><a href="list_8h_source.htm">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="struct_list.htm">List</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:af14b163eca916c233c4b3506aaccb8b3"><td class="memItemLeft" align="right" valign="top"><a id="af14b163eca916c233c4b3506aaccb8b3"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>_LIST_FN_MOD_</b>&#160;&#160;&#160;static inline</td></tr>
<tr class="separator:af14b163eca916c233c4b3506aaccb8b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:addd12bd54d022c5b5e65a6edc644c490"><td class="memItemLeft" align="right" valign="top"><a id="addd12bd54d022c5b5e65a6edc644c490"></a>
typedef struct <a class="el" href="struct_list.htm">List</a>&#160;</td><td class="memItemRight" valign="bottom"><b>list_t</b></td></tr>
<tr class="separator:addd12bd54d022c5b5e65a6edc644c490"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a3be976c2198f8b1047b8e1599634f523"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a3be976c2198f8b1047b8e1599634f523">list_make</a> (void *)</td></tr>
<tr class="memdesc:a3be976c2198f8b1047b8e1599634f523"><td class="mdescLeft">&#160;</td><td class="mdescRight">creates new list item with given data  <a href="#a3be976c2198f8b1047b8e1599634f523">More...</a><br /></td></tr>
<tr class="separator:a3be976c2198f8b1047b8e1599634f523"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9d77cadebfbab27b40c3af6cb6c0d26"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#ae9d77cadebfbab27b40c3af6cb6c0d26">list_init</a> (void *, size_t)</td></tr>
<tr class="memdesc:ae9d77cadebfbab27b40c3af6cb6c0d26"><td class="mdescLeft">&#160;</td><td class="mdescRight">initializes list with size  <a href="#ae9d77cadebfbab27b40c3af6cb6c0d26">More...</a><br /></td></tr>
<tr class="separator:ae9d77cadebfbab27b40c3af6cb6c0d26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a741b28bcbf9c8173a119cace16e647e4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a741b28bcbf9c8173a119cace16e647e4">list_last</a> (<a class="el" href="struct_list.htm">list_t</a> *)</td></tr>
<tr class="memdesc:a741b28bcbf9c8173a119cace16e647e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">gets last item of the list  <a href="#a741b28bcbf9c8173a119cace16e647e4">More...</a><br /></td></tr>
<tr class="separator:a741b28bcbf9c8173a119cace16e647e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2942dd782fc261b51056896722c2b07a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a2942dd782fc261b51056896722c2b07a">list_add</a> (<a class="el" href="struct_list.htm">list_t</a> *, <a class="el" href="struct_list.htm">list_t</a> *)</td></tr>
<tr class="memdesc:a2942dd782fc261b51056896722c2b07a"><td class="mdescLeft">&#160;</td><td class="mdescRight">adds item to the list, adds to next of current. current next becomes last of child. which means a -&gt; b -&gt; c and 1 -&gt; 2 -&gt; 3 then adding to 'b' yields to a -&gt; b -&gt; 1 -&gt; 2 -&gt; 3 -&gt; c  <a href="#a2942dd782fc261b51056896722c2b07a">More...</a><br /></td></tr>
<tr class="separator:a2942dd782fc261b51056896722c2b07a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36505368b3f9d97311f7d480265a3d8f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a36505368b3f9d97311f7d480265a3d8f">list_find</a> (<a class="el" href="struct_list.htm">list_t</a> *, <a class="el" href="struct_list.htm">list_t</a> *)</td></tr>
<tr class="memdesc:a36505368b3f9d97311f7d480265a3d8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">finds given node in given list returns node before it to actively change next  <a href="#a36505368b3f9d97311f7d480265a3d8f">More...</a><br /></td></tr>
<tr class="separator:a36505368b3f9d97311f7d480265a3d8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcf00125c7cccca84bfd8d706ab5c9c3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#abcf00125c7cccca84bfd8d706ab5c9c3">list_del</a> (<a class="el" href="struct_list.htm">list_t</a> **)</td></tr>
<tr class="memdesc:abcf00125c7cccca84bfd8d706ab5c9c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">deletes node from the list requires reference to node-ptr so from a -&gt; b -&gt; c to remove 'b' do del(&amp;a-&gt;next) which returns to pointer to b  <a href="#abcf00125c7cccca84bfd8d706ab5c9c3">More...</a><br /></td></tr>
<tr class="separator:abcf00125c7cccca84bfd8d706ab5c9c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b83061de980c06aa45068a00a61d966"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a9b83061de980c06aa45068a00a61d966">list_has</a> (<a class="el" href="struct_list.htm">list_t</a> *, void *)</td></tr>
<tr class="memdesc:a9b83061de980c06aa45068a00a61d966"><td class="mdescLeft">&#160;</td><td class="mdescRight">gets list item if list contains specified data reference.  <a href="#a9b83061de980c06aa45068a00a61d966">More...</a><br /></td></tr>
<tr class="separator:a9b83061de980c06aa45068a00a61d966"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bcb740adc060ffbf5b97187a559df89"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a7bcb740adc060ffbf5b97187a559df89">list_size</a> (<a class="el" href="struct_list.htm">list_t</a> *)</td></tr>
<tr class="memdesc:a7bcb740adc060ffbf5b97187a559df89"><td class="mdescLeft">&#160;</td><td class="mdescRight">gets size/length of the list from current point  <a href="#a7bcb740adc060ffbf5b97187a559df89">More...</a><br /></td></tr>
<tr class="separator:a7bcb740adc060ffbf5b97187a559df89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47c830a1f1e7028a5cebae0c1b156421"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a47c830a1f1e7028a5cebae0c1b156421">list_array</a> (<a class="el" href="struct_list.htm">list_t</a> *, void **)</td></tr>
<tr class="memdesc:a47c830a1f1e7028a5cebae0c1b156421"><td class="mdescLeft">&#160;</td><td class="mdescRight">converts list to array  <a href="#a47c830a1f1e7028a5cebae0c1b156421">More...</a><br /></td></tr>
<tr class="separator:a47c830a1f1e7028a5cebae0c1b156421"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f71552f38ce81b383858b380f78052e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a2f71552f38ce81b383858b380f78052e">list_pop</a> (<a class="el" href="struct_list.htm">list_t</a> **)</td></tr>
<tr class="memdesc:a2f71552f38ce81b383858b380f78052e"><td class="mdescLeft">&#160;</td><td class="mdescRight">removes top item list  <a href="#a2f71552f38ce81b383858b380f78052e">More...</a><br /></td></tr>
<tr class="separator:a2f71552f38ce81b383858b380f78052e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addeb181aaf428c5d8309e94c1fe4f0c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#addeb181aaf428c5d8309e94c1fe4f0c7">list_push</a> (<a class="el" href="struct_list.htm">list_t</a> **, <a class="el" href="struct_list.htm">list_t</a> *)</td></tr>
<tr class="memdesc:addeb181aaf428c5d8309e94c1fe4f0c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">inserts given item to top of list  <a href="#addeb181aaf428c5d8309e94c1fe4f0c7">More...</a><br /></td></tr>
<tr class="separator:addeb181aaf428c5d8309e94c1fe4f0c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29886c667fa6c36faf4a785440ddd541"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a29886c667fa6c36faf4a785440ddd541">list_get</a> (<a class="el" href="struct_list.htm">list_t</a> *, unsigned long)</td></tr>
<tr class="memdesc:a29886c667fa6c36faf4a785440ddd541"><td class="mdescLeft">&#160;</td><td class="mdescRight">gets Nth item from list  <a href="#a29886c667fa6c36faf4a785440ddd541">More...</a><br /></td></tr>
<tr class="separator:a29886c667fa6c36faf4a785440ddd541"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2343436c06685c2ab9fc334e2d775e46"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a2343436c06685c2ab9fc334e2d775e46">list_each</a> (<a class="el" href="struct_list.htm">list_t</a> *, void(*)(void *, size_t))</td></tr>
<tr class="memdesc:a2343436c06685c2ab9fc334e2d775e46"><td class="mdescLeft">&#160;</td><td class="mdescRight">executes callback function for every item of the list  <a href="#a2343436c06685c2ab9fc334e2d775e46">More...</a><br /></td></tr>
<tr class="separator:a2343436c06685c2ab9fc334e2d775e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8781cf7b693b7c465525e3cf5f2a5eed"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="list_8h.htm#a8781cf7b693b7c465525e3cf5f2a5eed">list_clean</a> (<a class="el" href="struct_list.htm">list_t</a> **, bool)</td></tr>
<tr class="memdesc:a8781cf7b693b7c465525e3cf5f2a5eed"><td class="mdescLeft">&#160;</td><td class="mdescRight">cleans up the list  <a href="#a8781cf7b693b7c465525e3cf5f2a5eed">More...</a><br /></td></tr>
<tr class="separator:a8781cf7b693b7c465525e3cf5f2a5eed"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>list functions for generic linked list implementation </p>

<p class="definition">Definition in file <a class="el" href="list_8h_source.htm">list.h</a>.</p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="a2942dd782fc261b51056896722c2b07a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2942dd782fc261b51056896722c2b07a">&#9670;&nbsp;</a></span>list_add()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void list_add </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>child</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>adds item to the list, adds to next of current. current next becomes last of child. which means a -&gt; b -&gt; c and 1 -&gt; 2 -&gt; 3 then adding to 'b' yields to a -&gt; b -&gt; 1 -&gt; 2 -&gt; 3 -&gt; c </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">root</td><td>pointer to list object </td></tr>
    <tr><td class="paramname">child</td><td>pointer to child to be added </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00064">64</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a47c830a1f1e7028a5cebae0c1b156421"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47c830a1f1e7028a5cebae0c1b156421">&#9670;&nbsp;</a></span>list_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long list_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void **&#160;</td>
          <td class="paramname"><em>target</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>converts list to array </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>reference to list </td></tr>
    <tr><td class="paramname">target</td><td>reference to object-ptr</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>size of the list that has been converted </dd></dl>
<dl class="section note"><dt>Note</dt><dd>target will be overwritten and reference will be lost general usage is array(&amp;my_array) where my_array is void* </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00152">152</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a8781cf7b693b7c465525e3cf5f2a5eed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8781cf7b693b7c465525e3cf5f2a5eed">&#9670;&nbsp;</a></span>list_clean()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void list_clean </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> **&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>full</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>cleans up the list </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>reference to list-pointer </td></tr>
    <tr><td class="paramname">full</td><td>perform full cleanup (free data too)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>list parameter will be overwritten and cleaned general usage follows as clean(&amp;list) where list is list_t* </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00247">247</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="abcf00125c7cccca84bfd8d706ab5c9c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcf00125c7cccca84bfd8d706ab5c9c3">&#9670;&nbsp;</a></span>list_del()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_list.htm">list_t</a>* list_del </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> **&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>deletes node from the list requires reference to node-ptr so from a -&gt; b -&gt; c to remove 'b' do del(&amp;a-&gt;next) which returns to pointer to b </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pointer</td><td>to node-ptr</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>deleted list item </dd></dl>
<dl class="section note"><dt>Note</dt><dd>returned item's next still points to node appended </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00101">101</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a2343436c06685c2ab9fc334e2d775e46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2343436c06685c2ab9fc334e2d775e46">&#9670;&nbsp;</a></span>list_each()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void list_each </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(void *, size_t)&#160;</td>
          <td class="paramname"><em>function</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>executes callback function for every item of the list </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>reference to list </td></tr>
    <tr><td class="paramname">function</td><td>reference to function</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>function requires two arguments<ul>
<li>void* actual reference to data</li>
<li>size_t sizeof or identifier that is given to this node </li>
</ul>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00227">227</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a36505368b3f9d97311f7d480265a3d8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36505368b3f9d97311f7d480265a3d8f">&#9670;&nbsp;</a></span>list_find()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_list.htm">list_t</a>* list_find </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>finds given node in given list returns node before it to actively change next </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>pointer to list </td></tr>
    <tr><td class="paramname">node</td><td>reference to node (to be find)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to item </dd></dl>
<dl class="section note"><dt>Note</dt><dd>return value might be null if item not found and can be same as given list if its root node. </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00082">82</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a29886c667fa6c36faf4a785440ddd541"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29886c667fa6c36faf4a785440ddd541">&#9670;&nbsp;</a></span>list_get()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_list.htm">list_t</a>* list_get </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>gets Nth item from list </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>reference to list </td></tr>
    <tr><td class="paramname">n</td><td>index to be returned</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to list item or null if n is less than list size </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00209">209</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a9b83061de980c06aa45068a00a61d966"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b83061de980c06aa45068a00a61d966">&#9670;&nbsp;</a></span>list_has()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_list.htm">list_t</a>* list_has </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>gets list item if list contains specified data reference. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>reference to list </td></tr>
    <tr><td class="paramname">data</td><td>reference to data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to list item containing data or null if not found </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00118">118</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="ae9d77cadebfbab27b40c3af6cb6c0d26"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9d77cadebfbab27b40c3af6cb6c0d26">&#9670;&nbsp;</a></span>list_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_list.htm">list_t</a>* list_init </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>initializes list with size </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>pointer-to data to put in object </td></tr>
    <tr><td class="paramname">size</td><td>the size of object or arbitary identifier to get object type</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to created list </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00034">34</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a741b28bcbf9c8173a119cace16e647e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a741b28bcbf9c8173a119cace16e647e4">&#9670;&nbsp;</a></span>list_last()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_list.htm">list_t</a>* list_last </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>gets last item of the list </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>pointer-to list object</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to last item </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00047">47</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a3be976c2198f8b1047b8e1599634f523"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3be976c2198f8b1047b8e1599634f523">&#9670;&nbsp;</a></span>list_make()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_list.htm">list_t</a>* list_make </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>creates new list item with given data </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>pointer-to data to put in object</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to created list </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00019">19</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a2f71552f38ce81b383858b380f78052e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f71552f38ce81b383858b380f78052e">&#9670;&nbsp;</a></span>list_pop()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_list.htm">list_t</a>* list_pop </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> **&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>removes top item list </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>reference to be removed</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to removed item </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00170">170</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="addeb181aaf428c5d8309e94c1fe4f0c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addeb181aaf428c5d8309e94c1fe4f0c7">&#9670;&nbsp;</a></span>list_push()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void list_push </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> **&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>inserts given item to top of list </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>reference to list-pointer </td></tr>
    <tr><td class="paramname">node</td><td>reference to node to be inserted</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>list parameter will be overwritten general usage follows as push(&amp;list) where list is list_t* </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00188">188</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
<a id="a7bcb740adc060ffbf5b97187a559df89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bcb740adc060ffbf5b97187a559df89">&#9670;&nbsp;</a></span>list_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long list_size </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_list.htm">list_t</a> *&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>gets size/length of the list from current point </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>reference to list</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>unsigned long type of list length </dd></dl>

<p class="definition">Definition at line <a class="el" href="list_8c_source.htm#l00133">133</a> of file <a class="el" href="list_8c_source.htm">list.c</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="list_8h.htm">list.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
